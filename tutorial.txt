usuário: t-334031
senha: G1JTXfK8

usuário: t-354645
senha: uX34UgPh

# Lógica de programação

# Photshop

# front-end
- HTML5 e CSS3
- UX UI
- JavaScript
- Frameworks (bootstrap)
- CMS (wordpress)

# banco de dados

# sistemas desktop
electron

# back-end (Java ou php)

# testes

# pi
___________________________________
Lógica de programação
- variáveis
- operadores
- algorítmo
- estruturas de controle
- POO
- estruturas de dados

GIT e GITHUB

Comandos básicos do git:
git config --global user.name "Seu nome"
git config --global user.email "seuemail@email.com"
git clone url_do_repositório (clonar repositorio)
git add . (adiciona ao repositorio local)
git commit -m "tutorial" (documentar as alterações)
git status (verificar o status do repositório lcoal)
git push (enviar ao repositorio)
git pull (sincroniza as informações do repositório no pc)

Gerar token GitHub
1) Settings
2) Developer Settings
3) Token classic
4) Gerar o token selecionando tudo, guardar o token

___________________________________________________
Boas práticas de programação
1) Cabeçalho de documentação
/**
    Nome do projeto
    Descrição a classe / função
    @author Claudio Silva
    @version 1.0
*/

2) Nomes de arquivos, variáveis, funções, classes, etc
Regras (clean code)
- Declarar nomes que tenham relação com o problema
- Não usar espaço, "ç", acentos e caracteres especiais
para declaração de nomes (erros internos no programa)
- Só classes iniciam com letra maiúscula
- Não iniciar um nome com número
- Quando for declarar dois nomes usar a técnica do camelo
(camel case) - Usar uma letra maiúscula na segunda palavra
Exemplo:
nomecliente -> nomeCliente

____________________________________________________
Comandos básicos do MS-DOS
cls -> limpar a tela
dir -> listar arquivos e diretórios
cd nome_diretório -> entrar no diretório
cd .. -> voltar par ao diretório anterior

____________________________________________________
Uma constante é como uma variável, mas com uma diferença importante: uma vez que você define o valor
de uma constante, ele não pode ser alterado durante a execução do programa.

Por que usar constantes?
Segurança: Se você sabe que um valor não deve ser alterado em seu programa, usar uma constante evita erros.
Legibilidade: Quando você usa uma constante, deixa claro para quem está lendo o código que aquele valor é
fixo e importante.
Boas práticas: Em muitos casos, é recomendado usar constantes sempre que possível para valores que não
precisam mudar, facilitando a manutenção do código.

Uma variável é um espaço na memória do computador onde armazenamos dados que podem ser utilizados e
modificados durante a execução de um programa. O nome "variável" vem do fato de que o valor armazenado
pode variar ao longo do tempo, conforme o programa roda.

Por que usar variáveis?
Para guardar informações que você vai precisar mais tarde.
Para realizar cálculos ou tomar decisões baseadas em diferentes valores.


Desafio 1: "A hora do código"
https://hourofcode.com/br/learn
Escolher um desafio "A hora do código", fazer e ao final salvar o certificado, postar no linkedin e marcar
o professor: @professorjosedeassis (caso não tenha linkedin, mostrar ao professor)

site code.org