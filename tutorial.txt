usuário: t-334031
senha: G1JTXfK8

usuário: t-354645
senha: uX34UgPh

# Lógica de programação

# Photshop

# front-end
- HTML5 e CSS3
- UX UI
- JavaScript
- Frameworks (bootstrap)
- CMS (wordpress)

# banco de dados

# sistemas desktop
electron

# back-end (Java ou php)

# testes

# pi
_____________________
Lógica de programação
- variáveis
- operadores
- algorítmo
- estruturas de controle
- POO
- estruturas de dados

__________________________
MANDAMENTOS DA PROGRAMAÇÃO

1) UX (User eXperience) - desenvolver sempre pensando na
experiência do usuário.

Dica de vídeo: https://youtu.be/Z1GNW_woXIO?si=rT8A-7amLsIxuoKW

2) Usar o mínimo possível de código (variáveis, operadores,
comparadores, estruturas de controle etc) para resolver o
problema (lembrar do marcapasso)

3) Entender o problema. Não adianta sentar na frente do computador
se você não sabe resolver o problema.
"Algorítmo" ("receita do bolo")
Conceito:
            variáveis
entrada - processamento - saída

____________
GIT e GITHUB

Comandos básicos do git:
git config --global user.name "Seu nome"
git config --global user.email "seuemail@email.com"
git clone url_do_repositório (clonar repositorio)
git add . (adiciona ao repositorio local)
git commit -m "tutorial" (documentar as alterações)
git status (verificar o status do repositório lcoal)
git push (enviar ao repositorio)
git pull (sincroniza as informações do repositório no pc)

Gerar token GitHub
1) Settings
2) Developer Settings
3) Token classic
4) Gerar o token selecionando tudo, guardar o token

____________________________
Boas práticas de programação
1) Cabeçalho de documentação
/**
    Nome do projeto
    Descrição a classe / função
    @author Claudio Silva
    @version 1.0
*/

2) Nomes de arquivos, variáveis, funções, classes, etc
Regras (clean code)
- Declarar nomes que tenham relação com o problema
- Não usar espaço, "ç", acentos e caracteres especiais
para declaração de nomes (erros internos no programa)
- Só classes iniciam com letra maiúscula
- Não iniciar um nome com número
- Quando for declarar dois nomes usar a técnica do camelo
(camel case) - Usar uma letra maiúscula na segunda palavra
Exemplo:
nomecliente -> nomeCliente

__________________________
Comandos básicos do MS-DOS
cls -> limpar a tela
dir -> listar arquivos e diretórios
cd nome_diretório -> entrar no diretório
cd .. -> voltar par ao diretório anterior

_____________________________
Desafio 1: "A hora do código"
https://hourofcode.com/br/learn

Escolher um desafio "A hora do código", fazer e ao final salvar
o certificado, postar no linkedin e marcar o professor:
@professorjosedeassis (caso não tenha linkedin, mostrar ao professor)

site code.org

_____________________________
Estruturas de controle
- condicionais
- laços de repetições

 - Estruturas de controles condicionais

if (condição) {
    // condição verdadeira
}


if (condição) {
    // condição verdadeira
} else {
    // condição falsa
}

Observações:
1) Uma condição nunca pode ser verdadeira e falsa simultaneamente.
2) No uso do if-else sempre uma das condições será processada.

if (condição) {
    // condição verdadeira
} else if (condição 2) {
    // condição 2 verdadeira
} else {
    // condição falsa
}

Obs: Nesta observação o else é opcional, porém se indicado caso
nenhuma condição for verdadeira ele obrigatoriamente executará
o que estiver no else.

switch case (uso de variável numérica (número inteiro))

switch (variável) {
    case 1:
    // código caso o valor da variável seja 1
    break
    case 2:
    // código caso o valor da variável seja 2
    break
    default:
    // opcional, o código será executado se nenhum caso for
    definido
    break

 - Estruturas de controle - Laços de repetições

for (let i = 1; i < 10; i++) {
    // o código aqui dentro será repetido enquanto a condição
    for verdadeira
}

// laço com número de repetições definidas
// let i = 1 (início)
// i < 10 (condição)
// i++ (incremento) i-- (decremento)

Uso do laço for 
1) Percorrer uma estrutura de dados (Importante)
2) Simplificar linhas de código (O código)
3) Fazer cálculos levando em conta a variável interna do laço

while (condição) {
    // condição verdadeira
}

do {
    // executa o código uma vez independente da condição e depois
    analisa a condição
} while (condição)

As estruturas while e do-while são estruturas de repetições
infinitas, ou seja enquanto a condição for verdadeira o código
interno será repetido infinitamente

______________________________________________________________
Executando o JavaScript junto com o HTML
- Execução interna no próprio documento HTML
- Link com um documento JS (preferencialmente)

______________________________________________________________
POO (Progamação orientada a objetos)

Objeto -> Estrutura de dados

Conceito relacionado a estrutura de dados:
CRUD (Create Read Update Delete)
São as 4 operações básicas que podemos realizar com a estrutura
de dados:
Create: Inserção de dados na estrutura
Read: Pesquisa de dados na estrutura
Update: Alteração de dados na estrutura
Delete: Exclusão de dados

Pilares da progamação orientada a objetos
// reutilização
Abstração
Herança
Polimorfismo

Classe modelo (abstração - herança - polimorfismo)
- Biblioteca nativa do JS
- Biblioteca instalada do node
- Criada pelo usuário usando class

// segurança
Encapsulamento

Observações:
Toda classe modelo obrigatoriamente deve se iniciar com letra
maíuscula

Dica:

Classe (Biologia EX: Mamíferos)

Lingua Portuguesa:
Objeto (substantivo)
Atributo (adjetivo)
Métodos (verbos)